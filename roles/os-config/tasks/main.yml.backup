---

- name: Check if cloud-init exists on this system
  stat:
    path: /etc/cloud/
  register: cloud_init_exists

- name: Tell cloud-init that its job is done (preserves hostname through reboots)
  file:
    path: /etc/cloud/cloud-init.disabled
    state: touch
  become: yes 
  when: cloud_init_exists == True

- name: Set the hostname as per the Ansible inventory file
  hostname:
    name: "{{ inventory_hostname }}"
  become: yes    


- name: Add "{{ os_group }}" group (so we can set ulimits)
  group:
    name: "{{ os_group }}"
    state: present  
  become: yes  

- name: Add "{{ os_user }}" user with the home dir /home/{{ os_user }}/ (so we can set ulimits)
  user:
    name: "{{ os_user }}"
    group: "{{ os_group }}"
    home: /home/{{ os_user }}/
    shell: /bin/bash
    comment: Splunk User
  become: yes


- name: -ulimits- Set /etc/security/limits.conf for "{{ os_user }}" user
  template:
    src: limits.conf.j2
    dest: "/etc/security/limits.conf"
  become: yes


- name: -THP- Install disable-thp script to be run at boot time
  template:
    src: disable-thp.j2
    dest: "/usr/local/bin/disable-thp"
    mode: '0754'
  become: yes

- name: -THP- Install disable-thp systemd unit file
  template:
    src: disable-thp.service.j2
    dest: "/etc/systemd/system/disable-thp.service"
    mode: '0644'
  become: yes  

- name: -THP- Configure systemd to run disable-thp at boot time
  systemd:
    name: disable-thp
    enabled: yes
    masked: no
  become: yes

- name: -THP- Run the disable-thp script
  command: /usr/local/bin/disable-thp
  become: yes     


- name: -firewalld- Check if /usr/sbin/firewalld exists
  stat: 
    path: /usr/sbin/firewalld
  register: firewalld_flag

- name: -firewalld-  Allow tcp/8000 traffic through firewalld
  firewalld:
    port: "8000/tcp"
    permanent: yes
    state: enabled
  become: yes  
  when: firewalld_flag.stat.exists == True

- name: -firewalld- Reload firewalld rules while maintaining session state (be nice to Ansible)   
  command: 
    cmd: firewall-cmd --reload
  become: yes  
  when: firewalld_flag.stat.exists == True  


- name: -iptables- Redirect 443 to 8000 (Ubuntu and Amazon Linux)
  command: iptables -A PREROUTING -t nat -p tcp --dport 443 -j REDIRECT --to-port 8000
  become: yes     
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Amazon'


- name: -Ubuntu Updates- Run the equivalent of "apt-get update" as a separate step
  apt:
    update_cache: yes
  become: yes     
  when: ansible_distribution == "Ubuntu"      

- name: -Ubuntu- Update all packages to the latest version "apt-get upgrade"
  apt:
    name: "*"
    state: latest
    autoremove: yes    
  become: yes     
  when: ansible_distribution == "Ubuntu"    


- name: -RedHat, CentOS, and Amazon Linux- Yum OS Package Updates
  yum:
    name: "*"
    state: latest  
  become: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Amazon'


- name: -PolicyKit- Install PolicyKit using apt-get (supported in 8.1.1)
  apt:
    name: policykit-1
    state: latest     
  become: yes     
  when: ansible_distribution == "Ubuntu"   

- name: -PolicyKit- Install PolicyKit using yum (supported in 8.1.1)
  yum:
    name: polkit
    state: latest  
  become: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Amazon'
